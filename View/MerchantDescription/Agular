@section Scripts {
    <script src="~/Scripts/sabio.services.merchant.js"></script>
    <script src="~/Scripts/sabio.services.media.js"></script>
    <script src="~/Scripts/sabio.services.geo.js"></script>
    <script>


       
        //*********ANGULAR SERVICE
       
        sabio.services.merchant.merchantServiceFactory = function ($baseService) {
            var aMerchantObject = sabio.services.merchant;  
            var newMerchantService = $.extend(true, {}, aMerchantObject, $baseService); 
            return newMerchantService;  
        };

       
        sabio.ng.addService(sabio.ng.app.module 
            , "$merchantService" 
            , ["$baseService"]   
            , sabio.services.merchant.merchantServiceFactory);   

        sabio.services.merchant.merchantGeoFactory = function ($baseService) {
            var aMerchantGeoObject = sabio.services.geo;
            var newMerchantGeoService = $.extend(true, {}, aMerchantGeoObject, $baseService);
            return newMerchantGeoService;
        };

        sabio.ng.addService(sabio.ng.app.module
           , "$merchantGeoService"
           , ["$baseService"]
           , sabio.services.merchant.merchantGeoFactory);
           

        //******ANGULAR CONTROLLER
        sabio.services.merchant.merchantControllerFactory = function (
             $scope
           , $baseController
           , $merchantService
           , $anchorScroll
           , $location
           , $merchantGeoService) {

            
            var vm = this;
            //  these properties will be used by the html directives to display data and let the user interact with data
            vm.item = null;
            vm.selectedMerchant = null;
            vm.hasSuccess = false;
            vm.hasError = false;
            vm.msgList = [];
            vm.submitMerchant = _submitMerchant;
            vm.submitDescription = _submitDescription;
            vm.geocoder = null;
            vm.map = null;
            vm.states = {};
            vm.stateIndex = null;

            //  these are all event handlers for click or ajax events
            vm.receiveItem = _receiveItem;
            vm.onMerchSuccess = _onMerchSuccess;
            vm.onDescriptionSuccess = _onDescriptionSuccess;
            vm.onMerchError = _onMerchError;
            vm.selectMerchant = _selectMerchant;
            vm.saveStatus = _saveStatus;
            vm.onGeoSuccess = _onGeoSuccess;
            vm.onCodeAddress = _onCodeAddress;
            vm.getMap = _getMap;
            vm.getStates = _getStates;
            vm.statesSuccess = _statesSuccess;
            vm.statesError = _statesError;

           
            $.extend(vm, $baseController);

            vm.$merchantService = $merchantService;
            vm.$merchantGeoService = $merchantGeoService;
            vm.$anchorScroll = $anchorScroll;
            vm.$location = $location;
            vm.$scope = $scope;
            
            vm.notify = vm.$merchantService.getNotifier($scope);

            vm.merchantForm = null; 
            vm.showNewMerchantErrors = false;  
            vm.descriptionForm = null;

            function _getStates(onSuccess, onError) {
                vm.$merchantGeoService.getGeo(vm.statesSuccess, vm.statesError);

            }

            function _statesSuccess(data, status, xhr) {
                vm.notify(function () {
                    vm.states = data.items;
                    vm.states.unshift({ stateProvinceCode: "STATE" });
                    //console.log("this is vm.states: ", vm.states);
                });
            }

            function _statesError() {
                console.log("geo state error");
            }

            function _receiveItem(data) {
                vm.notify(function () {
                    vm.item = data.item;
                    if (data.item) {
                        vm.stateIndex = {};
                        for (var i = 0; i < vm.states.length; i++) {
                            if (vm.item.address.state == vm.states[i].stateProvinceCode) {
                                vm.stateIndex = i;
                                break;
                            }
                        }
                        vm.item.address.state = vm.states[vm.stateIndex];
                    };
                });
                var activeLat = vm.item.address.latitude;
                var activeLng = vm.item.address.longitude;
                vm.getMap(activeLat, activeLng);
            };
         
            function _submitMerchant() {
                vm.showNewMerchantErrors = true;

                if (vm.merchantForm.$valid) {
                    var address = vm.item.address.address1 + " " + vm.item.address.city + " " + vm.item.address.state +
                       " " + vm.item.address.zip;

                    vm.onCodeAddress(address);

                    console.log("data is valid! go save this object -> ", vm.merchantForm);
                }
                else {
                    console.log("form submitted with invalid data :(")
                    console.log(vm.merchantForm.$error);
                }
            };
           
            function _submitDescription() {
                if (vm.descriptionForm.$valid) {

                    vm.$merchantService.updateDescription({description: vm.item.description}, vm.item.uid, vm.onDescriptionSuccess, vm.onMerchError);
                    console.log(vm.item.description);
                }
            }

            function _onCodeAddress(address) {
                console.log("code address:", address);
                vm.geocoder.geocode({ 'address': address }, vm.onGeoSuccess);
            };


            function _onGeoSuccess(results, status) {

                if (status == google.maps.GeocoderStatus.OK) {

                    var geometry = results[0].geometry;
                    var locale = geometry.location;
                    vm.map.setCenter(locale); //  center the map to our lat/lon coordinates from geocode

                    var marker = new google.maps.Marker({   //  drop a pin on the center
                        map: vm.map,
                        position: locale

                    });

                    console.log(results[0]);

                    if (geometry.viewport)
                        vm.map.fitBounds(geometry.viewport); //  resize the map window to zoom in on our piin

                    //  extract our lat and lon values from the response
                    var lat = locale.lat();
                    var lon = locale.lng();

                    //  attach lat and lon to the form data
                    vm.item.address.latitude = lat;
                    vm.item.address.longitude = lon;

                    //do this to package multilayer items into one format to send to the database
                    var formData = {};
                    formData.name = vm.item.name;
                    formData.titlePosition = vm.item.titlePosition;
                    formData.contactName = vm.item.contactName;
                    formData.contactLastName = vm.item.contactLastName;
                    formData.contactPhone = vm.item.contactPhone;
                    formData.description = vm.item.description;
                    formData.phone = vm.item.phone;
                    formData.hours = vm.item.hours;
                    formData.discount = vm.item.discount;
                    formData.replicatedSite = vm.item.replicateSite;
                    formData.url = vm.item.url;
                    formData.address = vm.item.address.address1;
                    formData.city = vm.item.address.city;
                    formData.stateProvinceId = vm.item.address.state.stateProvinceId;
                    formData.zip = vm.item.address.zip;
                    formData.latitude = vm.item.address.latitude;
                    formData.longitude = vm.item.address.longitude;

                    if (vm.item.uid && vm.item.uid.length > 0) {
                        console.log(formData);

                        vm.$merchantService.update(formData, vm.item.uid, vm.onMerchSuccess, vm.onMerchError);
                        console.log("Edit mode, get the data");
                        console.log("vm.item.uid", vm.item.uid);
                        
                    } else {

                        vm.$merchantService.create(formData, vm.receiveItem, vm.onMerchError);
                        console.log("Create mode, newId is empty");
                    };

                }
                else {
                    alert('Geocode was not successful for the following reason: ' + status);
                };
            };

            function _getMap(activeLat, activeLng) {

                var activeGeometry = new google.maps.LatLng(activeLat, activeLng);
               
                vm.map.setCenter(activeGeometry); 

                var marker = new google.maps.Marker({   
                    map: vm.map,
                    position: activeGeometry
                });

                vm.map.setZoom(14);
            };

            vm.getStates();
            initiate();

            function initiate() {
               
                    vm.$merchantService.selectByUserId(vm.receiveItem, vm.onMerchError);
                    console.log("Edit mode, here is the data");
                    console.log(vm.receiveItem);
               

                vm.geocoder = new google.maps.Geocoder();
                var latlng = new google.maps.LatLng(33.9885000, -118.3847110);
                var mapOptions = {
                    zoom: 15,
                    center: latlng
                };
                vm.map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            };



            function _selectMerchant(aMerchant) {
                console.log(aMerchant);
                vm.selectedMerchant = aMerchant;
            };

            function _saveStatus(aMerchant) {
                console.log("Go and save this new data");
                console.log(aMerchant);
            };


            function _onMerchSuccess(data, status, xhr) {
                vm.notify(function () {

                vm.hasSuccess = true;
                vm.msgList = [];
                vm.msgList.push("Your information was saved successfully.");
                    vm.$anchorScroll.yOffset = 100;
                    vm.$location.hash('msgWindow');
                });
            }

            function _onDescriptionSuccess(data, status, xhr) {                
                console.log("Success! Description success handler was fired!");
                vm.notify(function () {

                    vm.hasSuccess = true;
                    vm.msgList = [];
                    vm.msgList.push("Data was saved successfully.");
                    vm.$anchorScroll.yOffset = 100;
                    vm.$location.hash('msgWindow');
                    console.log("this is msgList", vm.msgList);
                });
                
            }
            function _onMerchError(jqXhr, error) {
                vm.notify(function () {

                    vm.showNewMerchantErrors = true;
                    vm.hasError = true;
                    vm.msgList = [];
                    vm.msgList.push("Something went wrong! Please try again.");
                    vm.$anchorScroll.yOffset = 100;
                    vm.$location.hash('msgWindow');
                
                    console.error(error);
                });
            };
            
        };

        sabio.ng.addController(sabio.ng.app.module
            , "merchantController"
            , ['$scope', '$baseController', '$merchantService', '$anchorScroll', '$location', '$merchantGeoService']
            , sabio.services.merchant.merchantControllerFactory);


        @Html.Partial("../Shared/_UploadPhotosScripts")

    </script>
}
